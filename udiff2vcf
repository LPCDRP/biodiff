#!/usr/bin/env perl

use strict;
use warnings;

while (<>) {
    my $line = $_;
    chomp($line);
  HEADER:
    if ($line =~ /^[\-{3}|\+{3}]/) {
	next;
    } elsif ($line =~ /^\@{2}/) {
	my (
	    undef,
	    $ref_coords,
	    $qry_coords,
	    undef
	    ) = split(' ',$line);
	# Remove the minus/plus signs from the front
	$ref_coords = substr($ref_coords,1);
	$qry_coords = substr($qry_coords,1);

	my ($ref_pos, $ref_ind) = split(",",$ref_coords);
	my ($new_pos, $qry_ind) = split(",",$qry_coords);
	$qry_ind = 1 if not defined($qry_ind);

	my ($del, $ins) = ('', '');
	my ($context_a, $context_b);

	my ($i,$j) = (1,1);
	while ($i <= $ref_ind && $j <= $qry_ind) {
	    $line = <>;
	    chomp($line);
	    if ($line =~ /^\-{1}/) {
		$del = $del . substr($line,1);
		$i++;
	    } elsif ($line =~ /^\+{1}/) {
		$ins = $ins . substr($line,1);
		$j++;
	    } elsif ($line =~ /^\s{1}/) {
		if  ($i==$ref_ind && $j==$qry_ind) {
		    $context_b = substr($line,1);
		    $context_a = '' if not defined($context_a);
		} elsif ( $i==1 && $j==1 ) {
		    $context_a = substr($line,1);
		} else {
		    # insert and delete the same base
		    # This is part of the same "hunk" and so is probably
		    # part of the same event
		    $ins = $ins . substr($line,1);
		    $del = $del . substr($line,1);
		}
		$i++;
		$j++;
	    }
	}
	# SNP - we don't need context for them
	if (length($ins) == length($del)) {
	    $ref_pos = $ref_pos + length($context_a);
	    $context_a = '';
	    $context_b = '';
	}
      VCFPRINT:
	print(
	    join("\t",(
		     "quiver1",
		     $ref_pos,
		     ".",
		     $context_a . $del . $context_b,
		     $context_a . $ins . $context_b,
		     ".",
		     "PASS",
		     "."
		 )
	    )."\n"
	    );
    }
    else {
	print $_;
	die;
    }
}
